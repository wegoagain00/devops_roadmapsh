# .github/workflows/deploy.yml

name: Build, Push to Docker Hub, and Deploy to EC2

# Controls when the workflow will run
on:
  push:
    branches:
      - main # Trigger the workflow when code is pushed to the 'main' branch

# Define environment variables that will be used throughout the workflow
env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Your Docker Hub username from GitHub Secrets
  DOCKER_IMAGE_NAME: secretserver # The name of your Docker image on Docker Hub
  EC2_INSTANCE_IP: ${{ secrets.EC2_PUBLIC_IP }} # Public IP of your EC2 instance, stored as a GitHub Secret
  SSH_USERNAME: ubuntu # Default username for Ubuntu AMIs
  CONTAINER_NAME: my-node-app-instance # Name for your Docker container

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use a fresh Ubuntu runner for the job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Get the code from your repository

      - name: Set up Docker Buildx (Optional, but good practice for better builds)
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Log in to Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub access token or password from GitHub Secrets

      - name: Build and push Docker image to Docker Hub
        run: |
          # Define the full image name including Docker Hub username and repository name
          # This will be in the format: your_docker_username/your_image_name
          IMAGE_TAG="${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"

          # Build the Docker image (remember add path to where its located( i had to moved workflow out to root repository))
          docker build -t $IMAGE_TAG ./dockerized-service

          # Push the Docker image to Docker Hub
          docker push $IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master # Use the SSH action to connect to your EC2 instance
        with:
          host: ${{ env.EC2_INSTANCE_IP }} # EC2 public IP from env variables
          username: ${{ env.SSH_USERNAME }} # SSH username from env variables
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH private key from GitHub Secrets
          script: |
            # --- Commands to execute on the EC2 instance ---

            # Docker Hub Login on EC2 (required to pull private images)
            # If your Docker Hub image is public, this step is technically optional for pulling,
            # but it's good practice for consistency and if you ever make it private.
            echo "Logging into Docker Hub on EC2..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # Pull the latest Docker image from Docker Hub
            echo "Pulling latest Docker image from Docker Hub..."
            # Note: The image name format is your_docker_username/your_image_name:latest
            docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

            # Stop the existing container if it's running
            echo "Stopping existing container (if any)..."
            docker stop ${{ env.CONTAINER_NAME }} || true

            # Remove the existing container if it exists
            echo "Removing old container (if any)..."
            docker rm ${{ env.CONTAINER_NAME }} || true

            # Run the new Docker container
            # Pass your environment variables (SECRET_MESSAGE, USERNAME, PASSWORD) securely
            # as --env flags to the docker run command. These should be GitHub Secrets.
            echo "Running new Docker container..."
            docker run \
              --name ${{ env.CONTAINER_NAME }} \
              -p 3000:3000 \
              -d \
              --env SECRET_MESSAGE="${{ secrets.SECRET_MESSAGE }}" \
              --env USERNAME="${{ secrets.USERNAME }}" \
              --env PASSWORD="${{ secrets.PASSWORD }}" \
              ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

            echo "Deployment to EC2 complete!"
